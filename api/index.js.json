{
  "updated_at": "4/13/2017",
  "data": "var exec = require('child_process').exec;\nvar prompt = require('prompt');\nconst fs = require('fs-extra')\nvar path = require('path')\nvar Git = require(\"nodegit\");\n\n\nprompt.message = \"\"\nvar pr = process.argv[2];\n\nif( pr == 'install' )\n{\n\texec('./scripts/install.sh', function(error, stdout, stderr){\n\t\tif( error == null )\n\t\t\tprocess.stdout.write(stdout);\n\t\telse\n\t\t\tconsole.log(error)\n\t\tvar schema = {\n\t\t\tproperties: {\n\t\t\t\tkey: {\n\t\t\t\t\tdescription: \"Enter your Github token\",\n\t\t\t\t\trequired: true,\n\t\t\t\t\tmessage: \"Required!\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprompt.start();\n\n\t\tprompt.get(schema, function(err, result){\n\t\t\tif( fs.existsSync('.travis.yml') )\n\t\t\t{\n\t\t\t\texec(\"travis encrypt \\\"GH_TOKEN=\" + result.key + \" --add\", (error, stdout, stderr) => {\n\t\t\t\t\tif( error !== null ){\n\t\t\t\t\t\tprocess.stdout.write(stdout);\n\t\t\t\t\t\tfs.createReadStream('.travis.yml').pipe(fs.createWriteStream('../.travis.yml'));\n\t\t\t\t\t\tfs.createReadStream('scripts/deploy.sh').pipe(fs.createWriteStream('../statiko-deploy.sh'));\n\n\t\t\t\t\t\tprocess.stdout.write(\"\\nMake sure to add your github repository url( without http or https )\\ninto your 'env' section of .travis.yml. For example: \\n========\\n\");\n\t\t\t\t\t\tprocess.stdout.write(\"GIT_REPO=\\\"github.com/poush/statiko\\\"\\n========\\n\");\n\t\t\t\t\t\tprocess.stdout.write(\"\\n Done! Enjoy! \\n- Team Statiko ðŸŽ‰ \");\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t})\n\t})\n}\nelse if( pr == 'make'){\n\n\texec('git diff --name-only', function(err, stdout, stderr) {\n\t\tif(err)\n\t\t\tthrow err\n\t\tfiles = stdout.split(\"\\n\");\n\t\tfilesToSend = []\n\t\tfiles.forEach( (ele) => {\n\t\t\tif(\n\t\t\t\tele != \"README.md\" &&\n\t\t\t\tele != \"index.html\" &&\n\t\t\t\tele != \".gitignore\" &&\n\t\t\t\tele != \"package.json\" &&\n\t\t\t\tele != \"bower_json.json\"\n\t\t\t){\n\t\t\t\tfilesToSend.push( ele );\n\t\t\t}\n\t\t});\n\t\tbuildAPI( filesToSend );\n\t})\n\n}\n\nvar getMostRecentCommit = function(repository) {\n\tconsole.log(repository+ \"Sd\")\n  return repository.getBranchCommit(\"master\");\n};\n\nvar getCommitMessage = function(commit) {\n  return commit.message();\n};\n\nvar getDiffForCommit = function( commit ){\n\tcommit.getDiff(callback).then(function(arrayDiff) {\n\t\treturn arrayDiff;\n\t});\n}\n\nfunction buildAPI( files ){\n\n\tvar today = new Date();\n\tvar dd = today.getDate();\n\tvar mm = today.getMonth()+1; //January is 0!\n\tvar yyyy = today.getFullYear();\n\n\tstring = {\n\t\tupdated_at: mm+'/'+dd+'/'+yyyy, \n\t\tdata: \"{{data}}\"\n\t};\n\n\tfiles.forEach(function(ele){\n\t\tfs.readFile(ele, function read(err, data) {\n\t    \tif (err) {\n\t        \treturn ;\n\t    \t}\n\t    \tstring.data = data.toString();\n\t    \tfs.outputJsonSync(__dirname + '/api/' + ele + '.json', string);\n\t\t});\n\t})\n}"
}
